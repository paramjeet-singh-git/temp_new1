--------------------bidirectional--------------------
class Node:
    def __init__(self, val, neighbors=[]):
        self.val = val
        self.neighbors = neighbors
        self.visited_right = False  # whether the node was reached by the BFS that started from source
        self.visited_left = False  # whether the node was reached by the BFS that started from destination
        self.parent_right = None  # used for retrieving the final path from source to the meeting point
        self.parent_left = None  # used for retrieving the final path from the meeting point to destination


# class Queue:
#    pass  # implement it yourself
from collections import deque

def bidirectional_search(s, t):
    def extract_path(node):
        """return the path when both BFS's have met"""
        node_copy = node
        path = []

        while node:
            path.append(node.val)
            node = node.parent_right
            
        path.reverse()
        del path[-1]  # because the meeting node appears twice
            
        while node_copy:
            path.append(node_copy.val)
            node_copy = node_copy.parent_left
        return path
        
    q = deque([])
    q.append(s)
    q.append(t)
    s.visited_right = True
    t.visited_left = True

    while len(q) > 0:
        n = q.pop()
            
        if n.visited_left and n.visited_right:  # if the node visited by both BFS's
            return extract_path(n)
            
        for node in n.neighbors:
            if n.visited_left == True and not node.visited_left:
                node.parent_left = n
                node.visited_left = True
                q.append(node)
            if n.visited_right == True and not node.visited_right:
                node.parent_right = n
                node.visited_right = True
                q.append(node)

    # not found
    return False

            
n0 = Node(0)
n1 = Node(1)
n2 = Node(2)
n3 = Node(3)
n4 = Node(4)
n5 = Node(5)
n6 = Node(6)
n7 = Node(7)
n0.neighbors = [n1, n5]
n1.neighbors = [n0, n2, n6]
n2.neighbors = [n1]
n3.neighbors = [n4, n6]
n4.neighbors = [n3]
n5.neighbors = [n0, n6]
n6.neighbors = [n1, n3, n5, n7]
n7.neighbors = [n6]
print("Path:", bidirectional_search(n0, n4))







---------------------hill climb-----------------------------
import numpy as np
def find_neighbours(state, landscape):
    neighbours = []
    dim = landscape.shape
    # left neighbour
    if state[0] != 0:
        neighbours.append((state[0] - 1, state[1]))
    # right neighbour
    if state[0] != dim[0] - 1:
        neighbours.append((state[0] + 1, state[1]))
    # top neighbour
    if state[1] != 0:
        neighbours.append((state[0], state[1] - 1))
    # bottom neighbour
    if state[1] != dim[1] - 1:
        neighbours.append((state[0], state[1] + 1))
    # top left
    if state[0] != 0 and state[1] != 0:
        neighbours.append((state[0] - 1, state[1] - 1))
    # bottom left
    if state[0] != 0 and state[1] != dim[1] - 1:
        neighbours.append((state[0] - 1, state[1] + 1))
    # top right
    if state[0] != dim[0] - 1 and state[1] != 0:
        neighbours.append((state[0] + 1, state[1] - 1))
    # bottom right
    if state[0] != dim[0] - 1 and state[1] != dim[1] - 1:
        neighbours.append((state[0] + 1, state[1] + 1))
    return neighbours
# Current optimization objective: local/global maximum
def hill_climb(curr_state, landscape):
    neighbours = find_neighbours(curr_state, landscape)
    bool
    ascended = False
    next_state = curr_state
    for neighbour in neighbours: #Find the neighbour with the greatest value
        if landscape[neighbour[0]][neighbour[1]] > landscape[next_state[0]][next_state[1]]:
            next_state = neighbour
            ascended = True
    return ascended, next_state
def __main__():
    landscape = np.random.randint(1, high=50, size=(10, 10))
    print(landscape)
    start_state = (3, 6)  # matrix index coordinates
    current_state = start_state
    count = 1
    ascending = True
    while ascending:
        print("\nStep #", count)
        print("Current state coordinates: ", current_state)
        print("Current state value: ", landscape[current_state[0]][current_state[1]])
        count += 1
        ascending, current_state = hill_climb(current_state, landscape)
    print("\nStep #", count)
    print("Optimization objective reached.")
    print("Final state coordinates: ", current_state)
    print("Final state value: ", landscape[current_state[0]][current_state[1]])
__main__()




----------------------minimax-----------------------------
import math

def minimax (curDepth, nodeIndex,maxTurn, scores,targetDepth):

	if (curDepth == targetDepth):
		return scores[nodeIndex]
	
	if (maxTurn):
		return max(minimax(curDepth + 1, nodeIndex * 2,False, scores, targetDepth),
				minimax(curDepth + 1, nodeIndex * 2 + 1,False, scores, targetDepth))
	
	else:
		return min(minimax(curDepth + 1, nodeIndex * 2,True, scores, targetDepth),
				minimax(curDepth + 1, nodeIndex * 2 + 1,True, scores, targetDepth))
	

scores = [3, 5, 2, 9, 12, 5, 23, 23]

treeDepth = math.log(len(scores), 2)

print("The optimal value is : ", end = "")
print(minimax(0, 0, True, scores, treeDepth))




--------------------alphabeta-----------------------------
MAX, MIN = 1000, -1000

def minimax(depth, nodeIndex, maximizingPlayer,values, alpha, beta):


	if depth == 3:
		return values[nodeIndex]

	if maximizingPlayer:
	
		best = MIN

		for i in range(0, 2):
			
			val = minimax(depth + 1, nodeIndex * 2 + i,False, values, alpha, beta)
			best = max(best, val)
			alpha = max(alpha, best)


			if beta <= alpha:
				break
		
		return best
	
	else:
		best = MAX


		for i in range(0, 2):
		
			val = minimax(depth + 1, nodeIndex * 2 + i,True, values, alpha, beta)
			best = min(best, val)
			beta = min(beta, best)

			# Alpha Beta Pruning
			if beta <= alpha:
				break
		
		return best
	

if __name__ == "__main__":

	values = [3, 5, 6, 9, 1, 2, 0, -1]
	print("The optimal value is :", minimax(0, 0, True, values, MIN, MAX))


